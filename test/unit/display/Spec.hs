import Quarterround
import Rowround
import Columnround
import Doubleround

import Test.HUnit

-- |Test success cases for the `quarterroundDisplay` and `quarterroundEquations` functions.
quarterroundDisplayTests :: Test
quarterroundDisplayTests = test
    ["quarterroundDisplay with valid input 1" ~:
        quarterroundDisplay ["y0", "y1", "y2", "y3"] ~?=
            [
                "y0 \8853 ((y3 \8853 ((y2 \8853 ((y1 \8853 ((y0 + y3) <<< 7) + y0) <<< 9) + y1 \8853 ((y0 + y3) <<< 7)) <<< 13) + y2 \8853 ((y1 \8853 ((y0 + y3) <<< 7) + y0) <<< 9)) <<< 18)",
                "y1 \8853 ((y0 + y3) <<< 7)",
                "y2 \8853 ((y1 \8853 ((y0 + y3) <<< 7) + y0) <<< 9)",
                "y3 \8853 ((y2 \8853 ((y1 \8853 ((y0 + y3) <<< 7) + y0) <<< 9) + y1 \8853 ((y0 + y3) <<< 7)) <<< 13)"
            ]
    ,"quarterroundEquations with valid input 1" ~:
        quarterroundEquations ["y0", "y1", "y2", "y3"] ~?=
            [
                "z0 = y0 ⊕ ((y3 ⊕ ((y2 ⊕ ((y1 ⊕ ((y0 + y3) <<< 7) + y0) <<< 9) + y1 ⊕ ((y0 + y3) <<< 7)) <<< 13) + y2 ⊕ ((y1 ⊕ ((y0 + y3) <<< 7) + y0) <<< 9)) <<< 18)",
                "z1 = y1 ⊕ ((y0 + y3) <<< 7)",
                "z2 = y2 ⊕ ((y1 ⊕ ((y0 + y3) <<< 7) + y0) <<< 9)",
                "z3 = y3 ⊕ ((y2 ⊕ ((y1 ⊕ ((y0 + y3) <<< 7) + y0) <<< 9) + y1 ⊕ ((y0 + y3) <<< 7)) <<< 13)"
            ]
    ,"quarterroundDisplay with valid input 2" ~:
        quarterroundDisplay ["x0", "x1", "x2", "x3"] ~?=
            [
                "x0 \8853 ((x3 \8853 ((x2 \8853 ((x1 \8853 ((x0 + x3) <<< 7) + x0) <<< 9) + x1 \8853 ((x0 + x3) <<< 7)) <<< 13) + x2 \8853 ((x1 \8853 ((x0 + x3) <<< 7) + x0) <<< 9)) <<< 18)",
                "x1 \8853 ((x0 + x3) <<< 7)",
                "x2 \8853 ((x1 \8853 ((x0 + x3) <<< 7) + x0) <<< 9)",
                "x3 \8853 ((x2 \8853 ((x1 \8853 ((x0 + x3) <<< 7) + x0) <<< 9) + x1 \8853 ((x0 + x3) <<< 7)) <<< 13)"
            ]
    ,"quarterroundDisplay with valid input 3" ~:
        quarterroundDisplay ["1", "2", "3", "4"] ~?=
            [
                "1 \8853 ((4 \8853 ((3 \8853 ((2 \8853 ((1 + 4) <<< 7) + 1) <<< 9) + 2 \8853 ((1 + 4) <<< 7)) <<< 13) + 3 \8853 ((2 \8853 ((1 + 4) <<< 7) + 1) <<< 9)) <<< 18)",
                "2 \8853 ((1 + 4) <<< 7)",
                "3 \8853 ((2 \8853 ((1 + 4) <<< 7) + 1) <<< 9)",
                "4 \8853 ((3 \8853 ((2 \8853 ((1 + 4) <<< 7) + 1) <<< 9) + 2 \8853 ((1 + 4) <<< 7)) <<< 13)"
            ]
    ,"quarterroundDisplay with valid input 4" ~:
        quarterroundDisplay ["A", "A", "A", "A"] ~?=
            [
                "A \8853 ((A \8853 ((A \8853 ((A \8853 ((A + A) <<< 7) + A) <<< 9) + A \8853 ((A + A) <<< 7)) <<< 13) + A \8853 ((A \8853 ((A + A) <<< 7) + A) <<< 9)) <<< 18)",
                "A \8853 ((A + A) <<< 7)",
                "A \8853 ((A \8853 ((A + A) <<< 7) + A) <<< 9)",
                "A \8853 ((A \8853 ((A \8853 ((A + A) <<< 7) + A) <<< 9) + A \8853 ((A + A) <<< 7)) <<< 13)"
            ]
    ]

-- |Test success cases for the `rowroundDisplay` and `rowroundEquations` functions.
rowroundDisplayTests :: Test
rowroundDisplayTests = test
    ["rowroundDisplay with valid input" ~:
        rowroundDisplay ["y0", "y1", "y2", "y3", "y4", "y5", "y6", "y7", "y8", "y9", "y10", "y11", "y12", "y13", "y14", "y15"] ~?=
            [
                "y0 \8853 ((y3 \8853 ((y2 \8853 ((y1 \8853 ((y0 + y3) <<< 7) + y0) <<< 9) + y1 \8853 ((y0 + y3) <<< 7)) <<< 13) + y2 \8853 ((y1 \8853 ((y0 + y3) <<< 7) + y0) <<< 9)) <<< 18)",
                "y1 \8853 ((y0 + y3) <<< 7)",
                "y2 \8853 ((y1 \8853 ((y0 + y3) <<< 7) + y0) <<< 9)",
                "y3 \8853 ((y2 \8853 ((y1 \8853 ((y0 + y3) <<< 7) + y0) <<< 9) + y1 \8853 ((y0 + y3) <<< 7)) <<< 13)",
                "y4 \8853 ((y7 \8853 ((y6 \8853 ((y5 + y4) <<< 7) + y5) <<< 9) + y6 \8853 ((y5 + y4) <<< 7)) <<< 13)",
                "y5 \8853 ((y4 \8853 ((y7 \8853 ((y6 \8853 ((y5 + y4) <<< 7) + y5) <<< 9) + y6 \8853 ((y5 + y4) <<< 7)) <<< 13) + y7 \8853 ((y6 \8853 ((y5 + y4) <<< 7) + y5) <<< 9)) <<< 18)",
                "y6 \8853 ((y5 + y4) <<< 7)",
                "y7 \8853 ((y6 \8853 ((y5 + y4) <<< 7) + y5) <<< 9)",
                "y8 \8853 ((y11 \8853 ((y10 + y9) <<< 7) + y10) <<< 9)",
                "y9 \8853 ((y8 \8853 ((y11 \8853 ((y10 + y9) <<< 7) + y10) <<< 9) + y11 \8853 ((y10 + y9) <<< 7)) <<< 13)",
                "y10 \8853 ((y9 \8853 ((y8 \8853 ((y11 \8853 ((y10 + y9) <<< 7) + y10) <<< 9) + y11 \8853 ((y10 + y9) <<< 7)) <<< 13) + y8 \8853 ((y11 \8853 ((y10 + y9) <<< 7) + y10) <<< 9)) <<< 18)",
                "y11 \8853 ((y10 + y9) <<< 7)",
                "y12 \8853 ((y15 + y14) <<< 7)",
                "y13 \8853 ((y12 \8853 ((y15 + y14) <<< 7) + y15) <<< 9)",
                "y14 \8853 ((y13 \8853 ((y12 \8853 ((y15 + y14) <<< 7) + y15) <<< 9) + y12 \8853 ((y15 + y14) <<< 7)) <<< 13)",
                "y15 \8853 ((y14 \8853 ((y13 \8853 ((y12 \8853 ((y15 + y14) <<< 7) + y15) <<< 9) + y12 \8853 ((y15 + y14) <<< 7)) <<< 13) + y13 \8853 ((y12 \8853 ((y15 + y14) <<< 7) + y15) <<< 9)) <<< 18)"
            ]
    ,"rowroundEquations with valid input" ~:
        rowroundEquations ["y0", "y1", "y2", "y3", "y4", "y5", "y6", "y7", "y8", "y9", "y10", "y11", "y12", "y13", "y14", "y15"] ~?=
            [
                "z0 = y0 ⊕ ((y3 ⊕ ((y2 ⊕ ((y1 ⊕ ((y0 + y3) <<< 7) + y0) <<< 9) + y1 ⊕ ((y0 + y3) <<< 7)) <<< 13) + y2 ⊕ ((y1 ⊕ ((y0 + y3) <<< 7) + y0) <<< 9)) <<< 18)",
                "z1 = y1 ⊕ ((y0 + y3) <<< 7)",
                "z2 = y2 ⊕ ((y1 ⊕ ((y0 + y3) <<< 7) + y0) <<< 9)",
                "z3 = y3 ⊕ ((y2 ⊕ ((y1 ⊕ ((y0 + y3) <<< 7) + y0) <<< 9) + y1 ⊕ ((y0 + y3) <<< 7)) <<< 13)",
                "z4 = y4 ⊕ ((y7 ⊕ ((y6 ⊕ ((y5 + y4) <<< 7) + y5) <<< 9) + y6 ⊕ ((y5 + y4) <<< 7)) <<< 13)",
                "z5 = y5 ⊕ ((y4 ⊕ ((y7 ⊕ ((y6 ⊕ ((y5 + y4) <<< 7) + y5) <<< 9) + y6 ⊕ ((y5 + y4) <<< 7)) <<< 13) + y7 ⊕ ((y6 ⊕ ((y5 + y4) <<< 7) + y5) <<< 9)) <<< 18)",
                "z6 = y6 ⊕ ((y5 + y4) <<< 7)",
                "z7 = y7 ⊕ ((y6 ⊕ ((y5 + y4) <<< 7) + y5) <<< 9)",
                "z8 = y8 ⊕ ((y11 ⊕ ((y10 + y9) <<< 7) + y10) <<< 9)",
                "z9 = y9 ⊕ ((y8 ⊕ ((y11 ⊕ ((y10 + y9) <<< 7) + y10) <<< 9) + y11 ⊕ ((y10 + y9) <<< 7)) <<< 13)",
                "z10 = y10 ⊕ ((y9 ⊕ ((y8 ⊕ ((y11 ⊕ ((y10 + y9) <<< 7) + y10) <<< 9) + y11 ⊕ ((y10 + y9) <<< 7)) <<< 13) + y8 ⊕ ((y11 ⊕ ((y10 + y9) <<< 7) + y10) <<< 9)) <<< 18)",
                "z11 = y11 ⊕ ((y10 + y9) <<< 7)",
                "z12 = y12 ⊕ ((y15 + y14) <<< 7)",
                "z13 = y13 ⊕ ((y12 ⊕ ((y15 + y14) <<< 7) + y15) <<< 9)",
                "z14 = y14 ⊕ ((y13 ⊕ ((y12 ⊕ ((y15 + y14) <<< 7) + y15) <<< 9) + y12 ⊕ ((y15 + y14) <<< 7)) <<< 13)",
                "z15 = y15 ⊕ ((y14 ⊕ ((y13 ⊕ ((y12 ⊕ ((y15 + y14) <<< 7) + y15) <<< 9) + y12 ⊕ ((y15 + y14) <<< 7)) <<< 13) + y13 ⊕ ((y12 ⊕ ((y15 + y14) <<< 7) + y15) <<< 9)) <<< 18)"
            ]
    ]
-- |Test success cases for the `columnroundDisplay` and `columnroundEquations` functions.
columnroundDisplayTests :: Test
columnroundDisplayTests = test
    ["columnroundDisplay with valid input" ~:
        columnroundDisplay ["y0", "y1", "y2", "y3", "y4", "y5", "y6", "y7", "y8", "y9", "y10", "y11", "y12", "y13", "y14", "y15"] ~?=
            [
                "y0 \8853 ((y12 \8853 ((y8 \8853 ((y4 \8853 ((y0 + y12) <<< 7) + y0) <<< 9) + y4 \8853 ((y0 + y12) <<< 7)) <<< 13) + y8 \8853 ((y4 \8853 ((y0 + y12) <<< 7) + y0) <<< 9)) <<< 18)",
                "y1 \8853 ((y13 \8853 ((y9 \8853 ((y5 + y1) <<< 7) + y5) <<< 9) + y9 \8853 ((y5 + y1) <<< 7)) <<< 13)",
                "y2 \8853 ((y14 \8853 ((y10 + y6) <<< 7) + y10) <<< 9)",
                "y3 \8853 ((y15 + y11) <<< 7)",
                "y4 \8853 ((y0 + y12) <<< 7)",
                "y5 \8853 ((y1 \8853 ((y13 \8853 ((y9 \8853 ((y5 + y1) <<< 7) + y5) <<< 9) + y9 \8853 ((y5 + y1) <<< 7)) <<< 13) + y13 \8853 ((y9 \8853 ((y5 + y1) <<< 7) + y5) <<< 9)) <<< 18)",
                "y6 \8853 ((y2 \8853 ((y14 \8853 ((y10 + y6) <<< 7) + y10) <<< 9) + y14 \8853 ((y10 + y6) <<< 7)) <<< 13)",
                "y7 \8853 ((y3 \8853 ((y15 + y11) <<< 7) + y15) <<< 9)",
                "y8 \8853 ((y4 \8853 ((y0 + y12) <<< 7) + y0) <<< 9)",
                "y9 \8853 ((y5 + y1) <<< 7)",
                "y10 \8853 ((y6 \8853 ((y2 \8853 ((y14 \8853 ((y10 + y6) <<< 7) + y10) <<< 9) + y14 \8853 ((y10 + y6) <<< 7)) <<< 13) + y2 \8853 ((y14 \8853 ((y10 + y6) <<< 7) + y10) <<< 9)) <<< 18)",
                "y11 \8853 ((y7 \8853 ((y3 \8853 ((y15 + y11) <<< 7) + y15) <<< 9) + y3 \8853 ((y15 + y11) <<< 7)) <<< 13)",
                "y12 \8853 ((y8 \8853 ((y4 \8853 ((y0 + y12) <<< 7) + y0) <<< 9) + y4 \8853 ((y0 + y12) <<< 7)) <<< 13)",
                "y13 \8853 ((y9 \8853 ((y5 + y1) <<< 7) + y5) <<< 9)",
                "y14 \8853 ((y10 + y6) <<< 7)",
                "y15 \8853 ((y11 \8853 ((y7 \8853 ((y3 \8853 ((y15 + y11) <<< 7) + y15) <<< 9) + y3 \8853 ((y15 + y11) <<< 7)) <<< 13) + y7 \8853 ((y3 \8853 ((y15 + y11) <<< 7) + y15) <<< 9)) <<< 18)"
            ]
    ,"columnroundEquations with valid input" ~:
        columnroundEquations ["y0", "y1", "y2", "y3", "y4", "y5", "y6", "y7", "y8", "y9", "y10", "y11", "y12", "y13", "y14", "y15"] ~?=
            [
                "z0 = y0 ⊕ ((y12 ⊕ ((y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9) + y4 ⊕ ((y0 + y12) <<< 7)) <<< 13) + y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9)) <<< 18)",
                "z1 = y1 ⊕ ((y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9) + y9 ⊕ ((y5 + y1) <<< 7)) <<< 13)",
                "z2 = y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9)",
                "z3 = y3 ⊕ ((y15 + y11) <<< 7)",
                "z4 = y4 ⊕ ((y0 + y12) <<< 7)",
                "z5 = y5 ⊕ ((y1 ⊕ ((y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9) + y9 ⊕ ((y5 + y1) <<< 7)) <<< 13) + y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9)) <<< 18)",
                "z6 = y6 ⊕ ((y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9) + y14 ⊕ ((y10 + y6) <<< 7)) <<< 13)",
                "z7 = y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9)",
                "z8 = y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9)",
                "z9 = y9 ⊕ ((y5 + y1) <<< 7)",
                "z10 = y10 ⊕ ((y6 ⊕ ((y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9) + y14 ⊕ ((y10 + y6) <<< 7)) <<< 13) + y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9)) <<< 18)",
                "z11 = y11 ⊕ ((y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9) + y3 ⊕ ((y15 + y11) <<< 7)) <<< 13)",
                "z12 = y12 ⊕ ((y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9) + y4 ⊕ ((y0 + y12) <<< 7)) <<< 13)",
                "z13 = y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9)",
                "z14 = y14 ⊕ ((y10 + y6) <<< 7)",
                "z15 = y15 ⊕ ((y11 ⊕ ((y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9) + y3 ⊕ ((y15 + y11) <<< 7)) <<< 13) + y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9)) <<< 18)"
            ]
    ]

-- |Test success cases for the `doubleroundDisplay` and `doubleroundEquations` functions.
doubleroundDisplayTests :: Test
doubleroundDisplayTests = test
    ["doubleroundDisplay with valid input" ~:
        doubleroundDisplay ["y0", "y1", "y2", "y3", "y4", "y5", "y6", "y7", "y8", "y9", "y10", "y11", "y12", "y13", "y14", "y15"] ~?=
            [
                "y0 \8853 ((y12 \8853 ((y8 \8853 ((y4 \8853 ((y0 + y12) <<< 7) + y0) <<< 9) + y4 \8853 ((y0 + y12) <<< 7)) <<< 13) + y8 \8853 ((y4 \8853 ((y0 + y12) <<< 7) + y0) <<< 9)) <<< 18) \8853 ((y3 \8853 ((y15 + y11) <<< 7) \8853 ((y2 \8853 ((y14 \8853 ((y10 + y6) <<< 7) + y10) <<< 9) \8853 ((y1 \8853 ((y13 \8853 ((y9 \8853 ((y5 + y1) <<< 7) + y5) <<< 9) + y9 \8853 ((y5 + y1) <<< 7)) <<< 13) \8853 ((y0 \8853 ((y12 \8853 ((y8 \8853 ((y4 \8853 ((y0 + y12) <<< 7) + y0) <<< 9) + y4 \8853 ((y0 + y12) <<< 7)) <<< 13) + y8 \8853 ((y4 \8853 ((y0 + y12) <<< 7) + y0) <<< 9)) <<< 18) + y3 \8853 ((y15 + y11) <<< 7)) <<< 7) + y0 \8853 ((y12 \8853 ((y8 \8853 ((y4 \8853 ((y0 + y12) <<< 7) + y0) <<< 9) + y4 \8853 ((y0 + y12) <<< 7)) <<< 13) + y8 \8853 ((y4 \8853 ((y0 + y12) <<< 7) + y0) <<< 9)) <<< 18)) <<< 9) + y1 \8853 ((y13 \8853 ((y9 \8853 ((y5 + y1) <<< 7) + y5) <<< 9) + y9 \8853 ((y5 + y1) <<< 7)) <<< 13) \8853 ((y0 \8853 ((y12 \8853 ((y8 \8853 ((y4 \8853 ((y0 + y12) <<< 7) + y0) <<< 9) + y4 \8853 ((y0 + y12) <<< 7)) <<< 13) + y8 \8853 ((y4 \8853 ((y0 + y12) <<< 7) + y0) <<< 9)) <<< 18) + y3 \8853 ((y15 + y11) <<< 7)) <<< 7)) <<< 13) + y2 \8853 ((y14 \8853 ((y10 + y6) <<< 7) + y10) <<< 9) \8853 ((y1 \8853 ((y13 \8853 ((y9 \8853 ((y5 + y1) <<< 7) + y5) <<< 9) + y9 \8853 ((y5 + y1) <<< 7)) <<< 13) \8853 ((y0 \8853 ((y12 \8853 ((y8 \8853 ((y4 \8853 ((y0 + y12) <<< 7) + y0) <<< 9) + y4 \8853 ((y0 + y12) <<< 7)) <<< 13) + y8 \8853 ((y4 \8853 ((y0 + y12) <<< 7) + y0) <<< 9)) <<< 18) + y3 \8853 ((y15 + y11) <<< 7)) <<< 7) + y0 \8853 ((y12 \8853 ((y8 \8853 ((y4 \8853 ((y0 + y12) <<< 7) + y0) <<< 9) + y4 \8853 ((y0 + y12) <<< 7)) <<< 13) + y8 \8853 ((y4 \8853 ((y0 + y12) <<< 7) + y0) <<< 9)) <<< 18)) <<< 9)) <<< 18)",
                "y1 \8853 ((y13 \8853 ((y9 \8853 ((y5 + y1) <<< 7) + y5) <<< 9) + y9 \8853 ((y5 + y1) <<< 7)) <<< 13) \8853 ((y0 \8853 ((y12 \8853 ((y8 \8853 ((y4 \8853 ((y0 + y12) <<< 7) + y0) <<< 9) + y4 \8853 ((y0 + y12) <<< 7)) <<< 13) + y8 \8853 ((y4 \8853 ((y0 + y12) <<< 7) + y0) <<< 9)) <<< 18) + y3 \8853 ((y15 + y11) <<< 7)) <<< 7)",
                "y2 \8853 ((y14 \8853 ((y10 + y6) <<< 7) + y10) <<< 9) \8853 ((y1 \8853 ((y13 \8853 ((y9 \8853 ((y5 + y1) <<< 7) + y5) <<< 9) + y9 \8853 ((y5 + y1) <<< 7)) <<< 13) \8853 ((y0 \8853 ((y12 \8853 ((y8 \8853 ((y4 \8853 ((y0 + y12) <<< 7) + y0) <<< 9) + y4 \8853 ((y0 + y12) <<< 7)) <<< 13) + y8 \8853 ((y4 \8853 ((y0 + y12) <<< 7) + y0) <<< 9)) <<< 18) + y3 \8853 ((y15 + y11) <<< 7)) <<< 7) + y0 \8853 ((y12 \8853 ((y8 \8853 ((y4 \8853 ((y0 + y12) <<< 7) + y0) <<< 9) + y4 \8853 ((y0 + y12) <<< 7)) <<< 13) + y8 \8853 ((y4 \8853 ((y0 + y12) <<< 7) + y0) <<< 9)) <<< 18)) <<< 9)",
                "y3 \8853 ((y15 + y11) <<< 7) \8853 ((y2 \8853 ((y14 \8853 ((y10 + y6) <<< 7) + y10) <<< 9) \8853 ((y1 \8853 ((y13 \8853 ((y9 \8853 ((y5 + y1) <<< 7) + y5) <<< 9) + y9 \8853 ((y5 + y1) <<< 7)) <<< 13) \8853 ((y0 \8853 ((y12 \8853 ((y8 \8853 ((y4 \8853 ((y0 + y12) <<< 7) + y0) <<< 9) + y4 \8853 ((y0 + y12) <<< 7)) <<< 13) + y8 \8853 ((y4 \8853 ((y0 + y12) <<< 7) + y0) <<< 9)) <<< 18) + y3 \8853 ((y15 + y11) <<< 7)) <<< 7) + y0 \8853 ((y12 \8853 ((y8 \8853 ((y4 \8853 ((y0 + y12) <<< 7) + y0) <<< 9) + y4 \8853 ((y0 + y12) <<< 7)) <<< 13) + y8 \8853 ((y4 \8853 ((y0 + y12) <<< 7) + y0) <<< 9)) <<< 18)) <<< 9) + y1 \8853 ((y13 \8853 ((y9 \8853 ((y5 + y1) <<< 7) + y5) <<< 9) + y9 \8853 ((y5 + y1) <<< 7)) <<< 13) \8853 ((y0 \8853 ((y12 \8853 ((y8 \8853 ((y4 \8853 ((y0 + y12) <<< 7) + y0) <<< 9) + y4 \8853 ((y0 + y12) <<< 7)) <<< 13) + y8 \8853 ((y4 \8853 ((y0 + y12) <<< 7) + y0) <<< 9)) <<< 18) + y3 \8853 ((y15 + y11) <<< 7)) <<< 7)) <<< 13)",
                "y4 \8853 ((y0 + y12) <<< 7) \8853 ((y7 \8853 ((y3 \8853 ((y15 + y11) <<< 7) + y15) <<< 9) \8853 ((y6 \8853 ((y2 \8853 ((y14 \8853 ((y10 + y6) <<< 7) + y10) <<< 9) + y14 \8853 ((y10 + y6) <<< 7)) <<< 13) \8853 ((y5 \8853 ((y1 \8853 ((y13 \8853 ((y9 \8853 ((y5 + y1) <<< 7) + y5) <<< 9) + y9 \8853 ((y5 + y1) <<< 7)) <<< 13) + y13 \8853 ((y9 \8853 ((y5 + y1) <<< 7) + y5) <<< 9)) <<< 18) + y4 \8853 ((y0 + y12) <<< 7)) <<< 7) + y5 \8853 ((y1 \8853 ((y13 \8853 ((y9 \8853 ((y5 + y1) <<< 7) + y5) <<< 9) + y9 \8853 ((y5 + y1) <<< 7)) <<< 13) + y13 \8853 ((y9 \8853 ((y5 + y1) <<< 7) + y5) <<< 9)) <<< 18)) <<< 9) + y6 \8853 ((y2 \8853 ((y14 \8853 ((y10 + y6) <<< 7) + y10) <<< 9) + y14 \8853 ((y10 + y6) <<< 7)) <<< 13) \8853 ((y5 \8853 ((y1 \8853 ((y13 \8853 ((y9 \8853 ((y5 + y1) <<< 7) + y5) <<< 9) + y9 \8853 ((y5 + y1) <<< 7)) <<< 13) + y13 \8853 ((y9 \8853 ((y5 + y1) <<< 7) + y5) <<< 9)) <<< 18) + y4 \8853 ((y0 + y12) <<< 7)) <<< 7)) <<< 13)",
                "y5 \8853 ((y1 \8853 ((y13 \8853 ((y9 \8853 ((y5 + y1) <<< 7) + y5) <<< 9) + y9 \8853 ((y5 + y1) <<< 7)) <<< 13) + y13 \8853 ((y9 \8853 ((y5 + y1) <<< 7) + y5) <<< 9)) <<< 18) \8853 ((y4 \8853 ((y0 + y12) <<< 7) \8853 ((y7 \8853 ((y3 \8853 ((y15 + y11) <<< 7) + y15) <<< 9) \8853 ((y6 \8853 ((y2 \8853 ((y14 \8853 ((y10 + y6) <<< 7) + y10) <<< 9) + y14 \8853 ((y10 + y6) <<< 7)) <<< 13) \8853 ((y5 \8853 ((y1 \8853 ((y13 \8853 ((y9 \8853 ((y5 + y1) <<< 7) + y5) <<< 9) + y9 \8853 ((y5 + y1) <<< 7)) <<< 13) + y13 \8853 ((y9 \8853 ((y5 + y1) <<< 7) + y5) <<< 9)) <<< 18) + y4 \8853 ((y0 + y12) <<< 7)) <<< 7) + y5 \8853 ((y1 \8853 ((y13 \8853 ((y9 \8853 ((y5 + y1) <<< 7) + y5) <<< 9) + y9 \8853 ((y5 + y1) <<< 7)) <<< 13) + y13 \8853 ((y9 \8853 ((y5 + y1) <<< 7) + y5) <<< 9)) <<< 18)) <<< 9) + y6 \8853 ((y2 \8853 ((y14 \8853 ((y10 + y6) <<< 7) + y10) <<< 9) + y14 \8853 ((y10 + y6) <<< 7)) <<< 13) \8853 ((y5 \8853 ((y1 \8853 ((y13 \8853 ((y9 \8853 ((y5 + y1) <<< 7) + y5) <<< 9) + y9 \8853 ((y5 + y1) <<< 7)) <<< 13) + y13 \8853 ((y9 \8853 ((y5 + y1) <<< 7) + y5) <<< 9)) <<< 18) + y4 \8853 ((y0 + y12) <<< 7)) <<< 7)) <<< 13) + y7 \8853 ((y3 \8853 ((y15 + y11) <<< 7) + y15) <<< 9) \8853 ((y6 \8853 ((y2 \8853 ((y14 \8853 ((y10 + y6) <<< 7) + y10) <<< 9) + y14 \8853 ((y10 + y6) <<< 7)) <<< 13) \8853 ((y5 \8853 ((y1 \8853 ((y13 \8853 ((y9 \8853 ((y5 + y1) <<< 7) + y5) <<< 9) + y9 \8853 ((y5 + y1) <<< 7)) <<< 13) + y13 \8853 ((y9 \8853 ((y5 + y1) <<< 7) + y5) <<< 9)) <<< 18) + y4 \8853 ((y0 + y12) <<< 7)) <<< 7) + y5 \8853 ((y1 \8853 ((y13 \8853 ((y9 \8853 ((y5 + y1) <<< 7) + y5) <<< 9) + y9 \8853 ((y5 + y1) <<< 7)) <<< 13) + y13 \8853 ((y9 \8853 ((y5 + y1) <<< 7) + y5) <<< 9)) <<< 18)) <<< 9)) <<< 18)",
                "y6 \8853 ((y2 \8853 ((y14 \8853 ((y10 + y6) <<< 7) + y10) <<< 9) + y14 \8853 ((y10 + y6) <<< 7)) <<< 13) \8853 ((y5 \8853 ((y1 \8853 ((y13 \8853 ((y9 \8853 ((y5 + y1) <<< 7) + y5) <<< 9) + y9 \8853 ((y5 + y1) <<< 7)) <<< 13) + y13 \8853 ((y9 \8853 ((y5 + y1) <<< 7) + y5) <<< 9)) <<< 18) + y4 \8853 ((y0 + y12) <<< 7)) <<< 7)",
                "y7 \8853 ((y3 \8853 ((y15 + y11) <<< 7) + y15) <<< 9) \8853 ((y6 \8853 ((y2 \8853 ((y14 \8853 ((y10 + y6) <<< 7) + y10) <<< 9) + y14 \8853 ((y10 + y6) <<< 7)) <<< 13) \8853 ((y5 \8853 ((y1 \8853 ((y13 \8853 ((y9 \8853 ((y5 + y1) <<< 7) + y5) <<< 9) + y9 \8853 ((y5 + y1) <<< 7)) <<< 13) + y13 \8853 ((y9 \8853 ((y5 + y1) <<< 7) + y5) <<< 9)) <<< 18) + y4 \8853 ((y0 + y12) <<< 7)) <<< 7) + y5 \8853 ((y1 \8853 ((y13 \8853 ((y9 \8853 ((y5 + y1) <<< 7) + y5) <<< 9) + y9 \8853 ((y5 + y1) <<< 7)) <<< 13) + y13 \8853 ((y9 \8853 ((y5 + y1) <<< 7) + y5) <<< 9)) <<< 18)) <<< 9)",
                "y8 \8853 ((y4 \8853 ((y0 + y12) <<< 7) + y0) <<< 9) \8853 ((y11 \8853 ((y7 \8853 ((y3 \8853 ((y15 + y11) <<< 7) + y15) <<< 9) + y3 \8853 ((y15 + y11) <<< 7)) <<< 13) \8853 ((y10 \8853 ((y6 \8853 ((y2 \8853 ((y14 \8853 ((y10 + y6) <<< 7) + y10) <<< 9) + y14 \8853 ((y10 + y6) <<< 7)) <<< 13) + y2 \8853 ((y14 \8853 ((y10 + y6) <<< 7) + y10) <<< 9)) <<< 18) + y9 \8853 ((y5 + y1) <<< 7)) <<< 7) + y10 \8853 ((y6 \8853 ((y2 \8853 ((y14 \8853 ((y10 + y6) <<< 7) + y10) <<< 9) + y14 \8853 ((y10 + y6) <<< 7)) <<< 13) + y2 \8853 ((y14 \8853 ((y10 + y6) <<< 7) + y10) <<< 9)) <<< 18)) <<< 9)",
                "y9 \8853 ((y5 + y1) <<< 7) \8853 ((y8 \8853 ((y4 \8853 ((y0 + y12) <<< 7) + y0) <<< 9) \8853 ((y11 \8853 ((y7 \8853 ((y3 \8853 ((y15 + y11) <<< 7) + y15) <<< 9) + y3 \8853 ((y15 + y11) <<< 7)) <<< 13) \8853 ((y10 \8853 ((y6 \8853 ((y2 \8853 ((y14 \8853 ((y10 + y6) <<< 7) + y10) <<< 9) + y14 \8853 ((y10 + y6) <<< 7)) <<< 13) + y2 \8853 ((y14 \8853 ((y10 + y6) <<< 7) + y10) <<< 9)) <<< 18) + y9 \8853 ((y5 + y1) <<< 7)) <<< 7) + y10 \8853 ((y6 \8853 ((y2 \8853 ((y14 \8853 ((y10 + y6) <<< 7) + y10) <<< 9) + y14 \8853 ((y10 + y6) <<< 7)) <<< 13) + y2 \8853 ((y14 \8853 ((y10 + y6) <<< 7) + y10) <<< 9)) <<< 18)) <<< 9) + y11 \8853 ((y7 \8853 ((y3 \8853 ((y15 + y11) <<< 7) + y15) <<< 9) + y3 \8853 ((y15 + y11) <<< 7)) <<< 13) \8853 ((y10 \8853 ((y6 \8853 ((y2 \8853 ((y14 \8853 ((y10 + y6) <<< 7) + y10) <<< 9) + y14 \8853 ((y10 + y6) <<< 7)) <<< 13) + y2 \8853 ((y14 \8853 ((y10 + y6) <<< 7) + y10) <<< 9)) <<< 18) + y9 \8853 ((y5 + y1) <<< 7)) <<< 7)) <<< 13)",
                "y10 \8853 ((y6 \8853 ((y2 \8853 ((y14 \8853 ((y10 + y6) <<< 7) + y10) <<< 9) + y14 \8853 ((y10 + y6) <<< 7)) <<< 13) + y2 \8853 ((y14 \8853 ((y10 + y6) <<< 7) + y10) <<< 9)) <<< 18) \8853 ((y9 \8853 ((y5 + y1) <<< 7) \8853 ((y8 \8853 ((y4 \8853 ((y0 + y12) <<< 7) + y0) <<< 9) \8853 ((y11 \8853 ((y7 \8853 ((y3 \8853 ((y15 + y11) <<< 7) + y15) <<< 9) + y3 \8853 ((y15 + y11) <<< 7)) <<< 13) \8853 ((y10 \8853 ((y6 \8853 ((y2 \8853 ((y14 \8853 ((y10 + y6) <<< 7) + y10) <<< 9) + y14 \8853 ((y10 + y6) <<< 7)) <<< 13) + y2 \8853 ((y14 \8853 ((y10 + y6) <<< 7) + y10) <<< 9)) <<< 18) + y9 \8853 ((y5 + y1) <<< 7)) <<< 7) + y10 \8853 ((y6 \8853 ((y2 \8853 ((y14 \8853 ((y10 + y6) <<< 7) + y10) <<< 9) + y14 \8853 ((y10 + y6) <<< 7)) <<< 13) + y2 \8853 ((y14 \8853 ((y10 + y6) <<< 7) + y10) <<< 9)) <<< 18)) <<< 9) + y11 \8853 ((y7 \8853 ((y3 \8853 ((y15 + y11) <<< 7) + y15) <<< 9) + y3 \8853 ((y15 + y11) <<< 7)) <<< 13) \8853 ((y10 \8853 ((y6 \8853 ((y2 \8853 ((y14 \8853 ((y10 + y6) <<< 7) + y10) <<< 9) + y14 \8853 ((y10 + y6) <<< 7)) <<< 13) + y2 \8853 ((y14 \8853 ((y10 + y6) <<< 7) + y10) <<< 9)) <<< 18) + y9 \8853 ((y5 + y1) <<< 7)) <<< 7)) <<< 13) + y8 \8853 ((y4 \8853 ((y0 + y12) <<< 7) + y0) <<< 9) \8853 ((y11 \8853 ((y7 \8853 ((y3 \8853 ((y15 + y11) <<< 7) + y15) <<< 9) + y3 \8853 ((y15 + y11) <<< 7)) <<< 13) \8853 ((y10 \8853 ((y6 \8853 ((y2 \8853 ((y14 \8853 ((y10 + y6) <<< 7) + y10) <<< 9) + y14 \8853 ((y10 + y6) <<< 7)) <<< 13) + y2 \8853 ((y14 \8853 ((y10 + y6) <<< 7) + y10) <<< 9)) <<< 18) + y9 \8853 ((y5 + y1) <<< 7)) <<< 7) + y10 \8853 ((y6 \8853 ((y2 \8853 ((y14 \8853 ((y10 + y6) <<< 7) + y10) <<< 9) + y14 \8853 ((y10 + y6) <<< 7)) <<< 13) + y2 \8853 ((y14 \8853 ((y10 + y6) <<< 7) + y10) <<< 9)) <<< 18)) <<< 9)) <<< 18)",
                "y11 \8853 ((y7 \8853 ((y3 \8853 ((y15 + y11) <<< 7) + y15) <<< 9) + y3 \8853 ((y15 + y11) <<< 7)) <<< 13) \8853 ((y10 \8853 ((y6 \8853 ((y2 \8853 ((y14 \8853 ((y10 + y6) <<< 7) + y10) <<< 9) + y14 \8853 ((y10 + y6) <<< 7)) <<< 13) + y2 \8853 ((y14 \8853 ((y10 + y6) <<< 7) + y10) <<< 9)) <<< 18) + y9 \8853 ((y5 + y1) <<< 7)) <<< 7)",
                "y12 \8853 ((y8 \8853 ((y4 \8853 ((y0 + y12) <<< 7) + y0) <<< 9) + y4 \8853 ((y0 + y12) <<< 7)) <<< 13) \8853 ((y15 \8853 ((y11 \8853 ((y7 \8853 ((y3 \8853 ((y15 + y11) <<< 7) + y15) <<< 9) + y3 \8853 ((y15 + y11) <<< 7)) <<< 13) + y7 \8853 ((y3 \8853 ((y15 + y11) <<< 7) + y15) <<< 9)) <<< 18) + y14 \8853 ((y10 + y6) <<< 7)) <<< 7)",
                "y13 \8853 ((y9 \8853 ((y5 + y1) <<< 7) + y5) <<< 9) \8853 ((y12 \8853 ((y8 \8853 ((y4 \8853 ((y0 + y12) <<< 7) + y0) <<< 9) + y4 \8853 ((y0 + y12) <<< 7)) <<< 13) \8853 ((y15 \8853 ((y11 \8853 ((y7 \8853 ((y3 \8853 ((y15 + y11) <<< 7) + y15) <<< 9) + y3 \8853 ((y15 + y11) <<< 7)) <<< 13) + y7 \8853 ((y3 \8853 ((y15 + y11) <<< 7) + y15) <<< 9)) <<< 18) + y14 \8853 ((y10 + y6) <<< 7)) <<< 7) + y15 \8853 ((y11 \8853 ((y7 \8853 ((y3 \8853 ((y15 + y11) <<< 7) + y15) <<< 9) + y3 \8853 ((y15 + y11) <<< 7)) <<< 13) + y7 \8853 ((y3 \8853 ((y15 + y11) <<< 7) + y15) <<< 9)) <<< 18)) <<< 9)",
                "y14 \8853 ((y10 + y6) <<< 7) \8853 ((y13 \8853 ((y9 \8853 ((y5 + y1) <<< 7) + y5) <<< 9) \8853 ((y12 \8853 ((y8 \8853 ((y4 \8853 ((y0 + y12) <<< 7) + y0) <<< 9) + y4 \8853 ((y0 + y12) <<< 7)) <<< 13) \8853 ((y15 \8853 ((y11 \8853 ((y7 \8853 ((y3 \8853 ((y15 + y11) <<< 7) + y15) <<< 9) + y3 \8853 ((y15 + y11) <<< 7)) <<< 13) + y7 \8853 ((y3 \8853 ((y15 + y11) <<< 7) + y15) <<< 9)) <<< 18) + y14 \8853 ((y10 + y6) <<< 7)) <<< 7) + y15 \8853 ((y11 \8853 ((y7 \8853 ((y3 \8853 ((y15 + y11) <<< 7) + y15) <<< 9) + y3 \8853 ((y15 + y11) <<< 7)) <<< 13) + y7 \8853 ((y3 \8853 ((y15 + y11) <<< 7) + y15) <<< 9)) <<< 18)) <<< 9) + y12 \8853 ((y8 \8853 ((y4 \8853 ((y0 + y12) <<< 7) + y0) <<< 9) + y4 \8853 ((y0 + y12) <<< 7)) <<< 13) \8853 ((y15 \8853 ((y11 \8853 ((y7 \8853 ((y3 \8853 ((y15 + y11) <<< 7) + y15) <<< 9) + y3 \8853 ((y15 + y11) <<< 7)) <<< 13) + y7 \8853 ((y3 \8853 ((y15 + y11) <<< 7) + y15) <<< 9)) <<< 18) + y14 \8853 ((y10 + y6) <<< 7)) <<< 7)) <<< 13)",
                "y15 \8853 ((y11 \8853 ((y7 \8853 ((y3 \8853 ((y15 + y11) <<< 7) + y15) <<< 9) + y3 \8853 ((y15 + y11) <<< 7)) <<< 13) + y7 \8853 ((y3 \8853 ((y15 + y11) <<< 7) + y15) <<< 9)) <<< 18) \8853 ((y14 \8853 ((y10 + y6) <<< 7) \8853 ((y13 \8853 ((y9 \8853 ((y5 + y1) <<< 7) + y5) <<< 9) \8853 ((y12 \8853 ((y8 \8853 ((y4 \8853 ((y0 + y12) <<< 7) + y0) <<< 9) + y4 \8853 ((y0 + y12) <<< 7)) <<< 13) \8853 ((y15 \8853 ((y11 \8853 ((y7 \8853 ((y3 \8853 ((y15 + y11) <<< 7) + y15) <<< 9) + y3 \8853 ((y15 + y11) <<< 7)) <<< 13) + y7 \8853 ((y3 \8853 ((y15 + y11) <<< 7) + y15) <<< 9)) <<< 18) + y14 \8853 ((y10 + y6) <<< 7)) <<< 7) + y15 \8853 ((y11 \8853 ((y7 \8853 ((y3 \8853 ((y15 + y11) <<< 7) + y15) <<< 9) + y3 \8853 ((y15 + y11) <<< 7)) <<< 13) + y7 \8853 ((y3 \8853 ((y15 + y11) <<< 7) + y15) <<< 9)) <<< 18)) <<< 9) + y12 \8853 ((y8 \8853 ((y4 \8853 ((y0 + y12) <<< 7) + y0) <<< 9) + y4 \8853 ((y0 + y12) <<< 7)) <<< 13) \8853 ((y15 \8853 ((y11 \8853 ((y7 \8853 ((y3 \8853 ((y15 + y11) <<< 7) + y15) <<< 9) + y3 \8853 ((y15 + y11) <<< 7)) <<< 13) + y7 \8853 ((y3 \8853 ((y15 + y11) <<< 7) + y15) <<< 9)) <<< 18) + y14 \8853 ((y10 + y6) <<< 7)) <<< 7)) <<< 13) + y13 \8853 ((y9 \8853 ((y5 + y1) <<< 7) + y5) <<< 9) \8853 ((y12 \8853 ((y8 \8853 ((y4 \8853 ((y0 + y12) <<< 7) + y0) <<< 9) + y4 \8853 ((y0 + y12) <<< 7)) <<< 13) \8853 ((y15 \8853 ((y11 \8853 ((y7 \8853 ((y3 \8853 ((y15 + y11) <<< 7) + y15) <<< 9) + y3 \8853 ((y15 + y11) <<< 7)) <<< 13) + y7 \8853 ((y3 \8853 ((y15 + y11) <<< 7) + y15) <<< 9)) <<< 18) + y14 \8853 ((y10 + y6) <<< 7)) <<< 7) + y15 \8853 ((y11 \8853 ((y7 \8853 ((y3 \8853 ((y15 + y11) <<< 7) + y15) <<< 9) + y3 \8853 ((y15 + y11) <<< 7)) <<< 13) + y7 \8853 ((y3 \8853 ((y15 + y11) <<< 7) + y15) <<< 9)) <<< 18)) <<< 9)) <<< 18)"
            ]
    ,"doubleoundEquations with valid input" ~:
        doubleroundEquations ["y0", "y1", "y2", "y3", "y4", "y5", "y6", "y7", "y8", "y9", "y10", "y11", "y12", "y13", "y14", "y15"] ~?=
            [
                "z0 = y0 ⊕ ((y12 ⊕ ((y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9) + y4 ⊕ ((y0 + y12) <<< 7)) <<< 13) + y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9)) <<< 18) ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) ⊕ ((y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9) ⊕ ((y1 ⊕ ((y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9) + y9 ⊕ ((y5 + y1) <<< 7)) <<< 13) ⊕ ((y0 ⊕ ((y12 ⊕ ((y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9) + y4 ⊕ ((y0 + y12) <<< 7)) <<< 13) + y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9)) <<< 18) + y3 ⊕ ((y15 + y11) <<< 7)) <<< 7) + y0 ⊕ ((y12 ⊕ ((y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9) + y4 ⊕ ((y0 + y12) <<< 7)) <<< 13) + y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9)) <<< 18)) <<< 9) + y1 ⊕ ((y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9) + y9 ⊕ ((y5 + y1) <<< 7)) <<< 13) ⊕ ((y0 ⊕ ((y12 ⊕ ((y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9) + y4 ⊕ ((y0 + y12) <<< 7)) <<< 13) + y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9)) <<< 18) + y3 ⊕ ((y15 + y11) <<< 7)) <<< 7)) <<< 13) + y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9) ⊕ ((y1 ⊕ ((y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9) + y9 ⊕ ((y5 + y1) <<< 7)) <<< 13) ⊕ ((y0 ⊕ ((y12 ⊕ ((y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9) + y4 ⊕ ((y0 + y12) <<< 7)) <<< 13) + y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9)) <<< 18) + y3 ⊕ ((y15 + y11) <<< 7)) <<< 7) + y0 ⊕ ((y12 ⊕ ((y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9) + y4 ⊕ ((y0 + y12) <<< 7)) <<< 13) + y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9)) <<< 18)) <<< 9)) <<< 18)",
                "z1 = y1 ⊕ ((y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9) + y9 ⊕ ((y5 + y1) <<< 7)) <<< 13) ⊕ ((y0 ⊕ ((y12 ⊕ ((y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9) + y4 ⊕ ((y0 + y12) <<< 7)) <<< 13) + y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9)) <<< 18) + y3 ⊕ ((y15 + y11) <<< 7)) <<< 7)",
                "z2 = y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9) ⊕ ((y1 ⊕ ((y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9) + y9 ⊕ ((y5 + y1) <<< 7)) <<< 13) ⊕ ((y0 ⊕ ((y12 ⊕ ((y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9) + y4 ⊕ ((y0 + y12) <<< 7)) <<< 13) + y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9)) <<< 18) + y3 ⊕ ((y15 + y11) <<< 7)) <<< 7) + y0 ⊕ ((y12 ⊕ ((y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9) + y4 ⊕ ((y0 + y12) <<< 7)) <<< 13) + y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9)) <<< 18)) <<< 9)",
                "z3 = y3 ⊕ ((y15 + y11) <<< 7) ⊕ ((y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9) ⊕ ((y1 ⊕ ((y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9) + y9 ⊕ ((y5 + y1) <<< 7)) <<< 13) ⊕ ((y0 ⊕ ((y12 ⊕ ((y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9) + y4 ⊕ ((y0 + y12) <<< 7)) <<< 13) + y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9)) <<< 18) + y3 ⊕ ((y15 + y11) <<< 7)) <<< 7) + y0 ⊕ ((y12 ⊕ ((y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9) + y4 ⊕ ((y0 + y12) <<< 7)) <<< 13) + y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9)) <<< 18)) <<< 9) + y1 ⊕ ((y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9) + y9 ⊕ ((y5 + y1) <<< 7)) <<< 13) ⊕ ((y0 ⊕ ((y12 ⊕ ((y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9) + y4 ⊕ ((y0 + y12) <<< 7)) <<< 13) + y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9)) <<< 18) + y3 ⊕ ((y15 + y11) <<< 7)) <<< 7)) <<< 13)",
                "z4 = y4 ⊕ ((y0 + y12) <<< 7) ⊕ ((y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9) ⊕ ((y6 ⊕ ((y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9) + y14 ⊕ ((y10 + y6) <<< 7)) <<< 13) ⊕ ((y5 ⊕ ((y1 ⊕ ((y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9) + y9 ⊕ ((y5 + y1) <<< 7)) <<< 13) + y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9)) <<< 18) + y4 ⊕ ((y0 + y12) <<< 7)) <<< 7) + y5 ⊕ ((y1 ⊕ ((y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9) + y9 ⊕ ((y5 + y1) <<< 7)) <<< 13) + y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9)) <<< 18)) <<< 9) + y6 ⊕ ((y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9) + y14 ⊕ ((y10 + y6) <<< 7)) <<< 13) ⊕ ((y5 ⊕ ((y1 ⊕ ((y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9) + y9 ⊕ ((y5 + y1) <<< 7)) <<< 13) + y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9)) <<< 18) + y4 ⊕ ((y0 + y12) <<< 7)) <<< 7)) <<< 13)",
                "z5 = y5 ⊕ ((y1 ⊕ ((y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9) + y9 ⊕ ((y5 + y1) <<< 7)) <<< 13) + y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9)) <<< 18) ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) ⊕ ((y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9) ⊕ ((y6 ⊕ ((y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9) + y14 ⊕ ((y10 + y6) <<< 7)) <<< 13) ⊕ ((y5 ⊕ ((y1 ⊕ ((y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9) + y9 ⊕ ((y5 + y1) <<< 7)) <<< 13) + y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9)) <<< 18) + y4 ⊕ ((y0 + y12) <<< 7)) <<< 7) + y5 ⊕ ((y1 ⊕ ((y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9) + y9 ⊕ ((y5 + y1) <<< 7)) <<< 13) + y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9)) <<< 18)) <<< 9) + y6 ⊕ ((y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9) + y14 ⊕ ((y10 + y6) <<< 7)) <<< 13) ⊕ ((y5 ⊕ ((y1 ⊕ ((y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9) + y9 ⊕ ((y5 + y1) <<< 7)) <<< 13) + y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9)) <<< 18) + y4 ⊕ ((y0 + y12) <<< 7)) <<< 7)) <<< 13) + y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9) ⊕ ((y6 ⊕ ((y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9) + y14 ⊕ ((y10 + y6) <<< 7)) <<< 13) ⊕ ((y5 ⊕ ((y1 ⊕ ((y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9) + y9 ⊕ ((y5 + y1) <<< 7)) <<< 13) + y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9)) <<< 18) + y4 ⊕ ((y0 + y12) <<< 7)) <<< 7) + y5 ⊕ ((y1 ⊕ ((y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9) + y9 ⊕ ((y5 + y1) <<< 7)) <<< 13) + y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9)) <<< 18)) <<< 9)) <<< 18)",
                "z6 = y6 ⊕ ((y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9) + y14 ⊕ ((y10 + y6) <<< 7)) <<< 13) ⊕ ((y5 ⊕ ((y1 ⊕ ((y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9) + y9 ⊕ ((y5 + y1) <<< 7)) <<< 13) + y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9)) <<< 18) + y4 ⊕ ((y0 + y12) <<< 7)) <<< 7)",
                "z7 = y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9) ⊕ ((y6 ⊕ ((y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9) + y14 ⊕ ((y10 + y6) <<< 7)) <<< 13) ⊕ ((y5 ⊕ ((y1 ⊕ ((y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9) + y9 ⊕ ((y5 + y1) <<< 7)) <<< 13) + y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9)) <<< 18) + y4 ⊕ ((y0 + y12) <<< 7)) <<< 7) + y5 ⊕ ((y1 ⊕ ((y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9) + y9 ⊕ ((y5 + y1) <<< 7)) <<< 13) + y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9)) <<< 18)) <<< 9)",
                "z8 = y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9) ⊕ ((y11 ⊕ ((y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9) + y3 ⊕ ((y15 + y11) <<< 7)) <<< 13) ⊕ ((y10 ⊕ ((y6 ⊕ ((y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9) + y14 ⊕ ((y10 + y6) <<< 7)) <<< 13) + y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9)) <<< 18) + y9 ⊕ ((y5 + y1) <<< 7)) <<< 7) + y10 ⊕ ((y6 ⊕ ((y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9) + y14 ⊕ ((y10 + y6) <<< 7)) <<< 13) + y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9)) <<< 18)) <<< 9)",
                "z9 = y9 ⊕ ((y5 + y1) <<< 7) ⊕ ((y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9) ⊕ ((y11 ⊕ ((y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9) + y3 ⊕ ((y15 + y11) <<< 7)) <<< 13) ⊕ ((y10 ⊕ ((y6 ⊕ ((y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9) + y14 ⊕ ((y10 + y6) <<< 7)) <<< 13) + y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9)) <<< 18) + y9 ⊕ ((y5 + y1) <<< 7)) <<< 7) + y10 ⊕ ((y6 ⊕ ((y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9) + y14 ⊕ ((y10 + y6) <<< 7)) <<< 13) + y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9)) <<< 18)) <<< 9) + y11 ⊕ ((y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9) + y3 ⊕ ((y15 + y11) <<< 7)) <<< 13) ⊕ ((y10 ⊕ ((y6 ⊕ ((y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9) + y14 ⊕ ((y10 + y6) <<< 7)) <<< 13) + y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9)) <<< 18) + y9 ⊕ ((y5 + y1) <<< 7)) <<< 7)) <<< 13)",
                "z10 = y10 ⊕ ((y6 ⊕ ((y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9) + y14 ⊕ ((y10 + y6) <<< 7)) <<< 13) + y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9)) <<< 18) ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) ⊕ ((y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9) ⊕ ((y11 ⊕ ((y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9) + y3 ⊕ ((y15 + y11) <<< 7)) <<< 13) ⊕ ((y10 ⊕ ((y6 ⊕ ((y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9) + y14 ⊕ ((y10 + y6) <<< 7)) <<< 13) + y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9)) <<< 18) + y9 ⊕ ((y5 + y1) <<< 7)) <<< 7) + y10 ⊕ ((y6 ⊕ ((y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9) + y14 ⊕ ((y10 + y6) <<< 7)) <<< 13) + y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9)) <<< 18)) <<< 9) + y11 ⊕ ((y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9) + y3 ⊕ ((y15 + y11) <<< 7)) <<< 13) ⊕ ((y10 ⊕ ((y6 ⊕ ((y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9) + y14 ⊕ ((y10 + y6) <<< 7)) <<< 13) + y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9)) <<< 18) + y9 ⊕ ((y5 + y1) <<< 7)) <<< 7)) <<< 13) + y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9) ⊕ ((y11 ⊕ ((y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9) + y3 ⊕ ((y15 + y11) <<< 7)) <<< 13) ⊕ ((y10 ⊕ ((y6 ⊕ ((y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9) + y14 ⊕ ((y10 + y6) <<< 7)) <<< 13) + y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9)) <<< 18) + y9 ⊕ ((y5 + y1) <<< 7)) <<< 7) + y10 ⊕ ((y6 ⊕ ((y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9) + y14 ⊕ ((y10 + y6) <<< 7)) <<< 13) + y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9)) <<< 18)) <<< 9)) <<< 18)",
                "z11 = y11 ⊕ ((y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9) + y3 ⊕ ((y15 + y11) <<< 7)) <<< 13) ⊕ ((y10 ⊕ ((y6 ⊕ ((y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9) + y14 ⊕ ((y10 + y6) <<< 7)) <<< 13) + y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9)) <<< 18) + y9 ⊕ ((y5 + y1) <<< 7)) <<< 7)",
                "z12 = y12 ⊕ ((y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9) + y4 ⊕ ((y0 + y12) <<< 7)) <<< 13) ⊕ ((y15 ⊕ ((y11 ⊕ ((y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9) + y3 ⊕ ((y15 + y11) <<< 7)) <<< 13) + y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9)) <<< 18) + y14 ⊕ ((y10 + y6) <<< 7)) <<< 7)",
                "z13 = y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9) ⊕ ((y12 ⊕ ((y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9) + y4 ⊕ ((y0 + y12) <<< 7)) <<< 13) ⊕ ((y15 ⊕ ((y11 ⊕ ((y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9) + y3 ⊕ ((y15 + y11) <<< 7)) <<< 13) + y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9)) <<< 18) + y14 ⊕ ((y10 + y6) <<< 7)) <<< 7) + y15 ⊕ ((y11 ⊕ ((y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9) + y3 ⊕ ((y15 + y11) <<< 7)) <<< 13) + y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9)) <<< 18)) <<< 9)",
                "z14 = y14 ⊕ ((y10 + y6) <<< 7) ⊕ ((y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9) ⊕ ((y12 ⊕ ((y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9) + y4 ⊕ ((y0 + y12) <<< 7)) <<< 13) ⊕ ((y15 ⊕ ((y11 ⊕ ((y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9) + y3 ⊕ ((y15 + y11) <<< 7)) <<< 13) + y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9)) <<< 18) + y14 ⊕ ((y10 + y6) <<< 7)) <<< 7) + y15 ⊕ ((y11 ⊕ ((y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9) + y3 ⊕ ((y15 + y11) <<< 7)) <<< 13) + y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9)) <<< 18)) <<< 9) + y12 ⊕ ((y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9) + y4 ⊕ ((y0 + y12) <<< 7)) <<< 13) ⊕ ((y15 ⊕ ((y11 ⊕ ((y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9) + y3 ⊕ ((y15 + y11) <<< 7)) <<< 13) + y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9)) <<< 18) + y14 ⊕ ((y10 + y6) <<< 7)) <<< 7)) <<< 13)",
                "z15 = y15 ⊕ ((y11 ⊕ ((y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9) + y3 ⊕ ((y15 + y11) <<< 7)) <<< 13) + y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9)) <<< 18) ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) ⊕ ((y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9) ⊕ ((y12 ⊕ ((y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9) + y4 ⊕ ((y0 + y12) <<< 7)) <<< 13) ⊕ ((y15 ⊕ ((y11 ⊕ ((y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9) + y3 ⊕ ((y15 + y11) <<< 7)) <<< 13) + y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9)) <<< 18) + y14 ⊕ ((y10 + y6) <<< 7)) <<< 7) + y15 ⊕ ((y11 ⊕ ((y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9) + y3 ⊕ ((y15 + y11) <<< 7)) <<< 13) + y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9)) <<< 18)) <<< 9) + y12 ⊕ ((y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9) + y4 ⊕ ((y0 + y12) <<< 7)) <<< 13) ⊕ ((y15 ⊕ ((y11 ⊕ ((y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9) + y3 ⊕ ((y15 + y11) <<< 7)) <<< 13) + y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9)) <<< 18) + y14 ⊕ ((y10 + y6) <<< 7)) <<< 7)) <<< 13) + y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9) ⊕ ((y12 ⊕ ((y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9) + y4 ⊕ ((y0 + y12) <<< 7)) <<< 13) ⊕ ((y15 ⊕ ((y11 ⊕ ((y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9) + y3 ⊕ ((y15 + y11) <<< 7)) <<< 13) + y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9)) <<< 18) + y14 ⊕ ((y10 + y6) <<< 7)) <<< 7) + y15 ⊕ ((y11 ⊕ ((y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9) + y3 ⊕ ((y15 + y11) <<< 7)) <<< 13) + y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9)) <<< 18)) <<< 9)) <<< 18)"
            ]
    ]

-- |Test success cases for the `doubleroundRDisplay` and `doubleroundREquations` functions.
doubleroundRDisplayTests :: Test
doubleroundRDisplayTests = test
    ["doubleroundRDisplay with valid input" ~: do
        -- Expected output for the first 100 chars of each line of the display output.
        let expectedDisplayOutputStart = [
                "y0 ⊕ ((y12 ⊕ ((y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9) + y4 ⊕ ((y0 + y12) <<< 7)) <<< 13) + y8 ⊕",
                "y1 ⊕ ((y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9) + y9 ⊕ ((y5 + y1) <<< 7)) <<< 13) ⊕ ((y0 ⊕ ((y12 ",
                "y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9) ⊕ ((y1 ⊕ ((y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9)",
                "y3 ⊕ ((y15 + y11) <<< 7) ⊕ ((y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9) ⊕ ((y1 ⊕ ((y13 ⊕ ((y9 ⊕ (",
                "y4 ⊕ ((y0 + y12) <<< 7) ⊕ ((y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9) ⊕ ((y6 ⊕ ((y2 ⊕ ((y14 ⊕ ((",
                "y5 ⊕ ((y1 ⊕ ((y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9) + y9 ⊕ ((y5 + y1) <<< 7)) <<< 13) + y13 ⊕ ",
                "y6 ⊕ ((y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9) + y14 ⊕ ((y10 + y6) <<< 7)) <<< 13) ⊕ ((y5 ⊕ ((",
                "y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9) ⊕ ((y6 ⊕ ((y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< ",
                "y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9) ⊕ ((y11 ⊕ ((y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9",
                "y9 ⊕ ((y5 + y1) <<< 7) ⊕ ((y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9) ⊕ ((y11 ⊕ ((y7 ⊕ ((y3 ⊕ ((y15",
                "y10 ⊕ ((y6 ⊕ ((y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9) + y14 ⊕ ((y10 + y6) <<< 7)) <<< 13) + y",
                "y11 ⊕ ((y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9) + y3 ⊕ ((y15 + y11) <<< 7)) <<< 13) ⊕ ((y10 ⊕ ",
                "y12 ⊕ ((y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9) + y4 ⊕ ((y0 + y12) <<< 7)) <<< 13) ⊕ ((y15 ⊕ ((y",
                "y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9) ⊕ ((y12 ⊕ ((y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9) ",
                "y14 ⊕ ((y10 + y6) <<< 7) ⊕ ((y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9) ⊕ ((y12 ⊕ ((y8 ⊕ ((y4 ⊕ ((y",
                "y15 ⊕ ((y11 ⊕ ((y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9) + y3 ⊕ ((y15 + y11) <<< 7)) <<< 13) + "]

        -- Expected output for the last 100 chars of each line of the display output.
        let expectedDisplayOutputEnd = [
                "⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9)) <<< 18)) <<< 9)) <<< 18)) <<< 9)) <<< 18)) <<< 9)) <<< 18)",
                "⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9)) <<< 18) + y9 ⊕ ((y5 + y1) <<< 7)) <<< 7)) <<< 7)) <<< 7)",
                "13) + y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9)) <<< 18)) <<< 9)) <<< 18)) <<< 9)) <<< 18)) <<< 9)",
                " ((y10 + y6) <<< 7) + y10) <<< 9)) <<< 18) + y9 ⊕ ((y5 + y1) <<< 7)) <<< 7)) <<< 7)) <<< 7)) <<< 13)",
                "y15 + y11) <<< 7) + y15) <<< 9)) <<< 18) + y14 ⊕ ((y10 + y6) <<< 7)) <<< 7)) <<< 7)) <<< 7)) <<< 13)",
                " ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9)) <<< 18)) <<< 9)) <<< 18)) <<< 9)) <<< 18)) <<< 9)) <<< 18)",
                "((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9)) <<< 18) + y14 ⊕ ((y10 + y6) <<< 7)) <<< 7)) <<< 7)) <<< 7)",
                "13) + y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9)) <<< 18)) <<< 9)) <<< 18)) <<< 9)) <<< 18)) <<< 9)",
                ") + y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9)) <<< 18)) <<< 9)) <<< 18)) <<< 9)) <<< 18)) <<< 9)",
                "((y0 + y12) <<< 7) + y0) <<< 9)) <<< 18) + y3 ⊕ ((y15 + y11) <<< 7)) <<< 7)) <<< 7)) <<< 7)) <<< 13)",
                "((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9)) <<< 18)) <<< 9)) <<< 18)) <<< 9)) <<< 18)) <<< 9)) <<< 18)",
                "⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9)) <<< 18) + y3 ⊕ ((y15 + y11) <<< 7)) <<< 7)) <<< 7)) <<< 7)",
                "3 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9)) <<< 18) + y4 ⊕ ((y0 + y12) <<< 7)) <<< 7)) <<< 7)) <<< 7)",
                ") + y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9)) <<< 18)) <<< 9)) <<< 18)) <<< 9)) <<< 18)) <<< 9)",
                "⊕ ((y5 + y1) <<< 7) + y5) <<< 9)) <<< 18) + y4 ⊕ ((y0 + y12) <<< 7)) <<< 7)) <<< 7)) <<< 7)) <<< 13)",
                "((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9)) <<< 18)) <<< 9)) <<< 18)) <<< 9)) <<< 18)) <<< 9)) <<< 18)"]

        -- Expected output for the first 100 chars of each line of the equations output.
        let expectedEquationsOutputStart = [
                "z0 = y0 ⊕ ((y12 ⊕ ((y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9) + y4 ⊕ ((y0 + y12) <<< 7)) <<< 13) +",
                "z1 = y1 ⊕ ((y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9) + y9 ⊕ ((y5 + y1) <<< 7)) <<< 13) ⊕ ((y0 ⊕ (",
                "z2 = y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9) ⊕ ((y1 ⊕ ((y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <",
                "z3 = y3 ⊕ ((y15 + y11) <<< 7) ⊕ ((y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9) ⊕ ((y1 ⊕ ((y13 ⊕ ((y",
                "z4 = y4 ⊕ ((y0 + y12) <<< 7) ⊕ ((y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9) ⊕ ((y6 ⊕ ((y2 ⊕ ((y14",
                "z5 = y5 ⊕ ((y1 ⊕ ((y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9) + y9 ⊕ ((y5 + y1) <<< 7)) <<< 13) + y",
                "z6 = y6 ⊕ ((y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9) + y14 ⊕ ((y10 + y6) <<< 7)) <<< 13) ⊕ ((y5",
                "z7 = y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9) ⊕ ((y6 ⊕ ((y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10)",
                "z8 = y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9) ⊕ ((y11 ⊕ ((y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) ",
                "z9 = y9 ⊕ ((y5 + y1) <<< 7) ⊕ ((y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9) ⊕ ((y11 ⊕ ((y7 ⊕ ((y3 ⊕ ",
                "z10 = y10 ⊕ ((y6 ⊕ ((y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9) + y14 ⊕ ((y10 + y6) <<< 7)) <<< 1",
                "z11 = y11 ⊕ ((y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9) + y3 ⊕ ((y15 + y11) <<< 7)) <<< 13) ⊕ ((",
                "z12 = y12 ⊕ ((y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9) + y4 ⊕ ((y0 + y12) <<< 7)) <<< 13) ⊕ ((y15",
                "z13 = y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9) ⊕ ((y12 ⊕ ((y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <",
                "z14 = y14 ⊕ ((y10 + y6) <<< 7) ⊕ ((y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9) ⊕ ((y12 ⊕ ((y8 ⊕ ((y4",
                "z15 = y15 ⊕ ((y11 ⊕ ((y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9) + y3 ⊕ ((y15 + y11) <<< 7)) <<< "]

        -- Expected output for the last 100 chars of each line of the equations output.
        let expectedEquationsOutputEnd = [
                "⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9)) <<< 18)) <<< 9)) <<< 18)) <<< 9)) <<< 18)) <<< 9)) <<< 18)",
                "⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9)) <<< 18) + y9 ⊕ ((y5 + y1) <<< 7)) <<< 7)) <<< 7)) <<< 7)",
                "13) + y8 ⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9)) <<< 18)) <<< 9)) <<< 18)) <<< 9)) <<< 18)) <<< 9)",
                " ((y10 + y6) <<< 7) + y10) <<< 9)) <<< 18) + y9 ⊕ ((y5 + y1) <<< 7)) <<< 7)) <<< 7)) <<< 7)) <<< 13)",
                "y15 + y11) <<< 7) + y15) <<< 9)) <<< 18) + y14 ⊕ ((y10 + y6) <<< 7)) <<< 7)) <<< 7)) <<< 7)) <<< 13)",
                " ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9)) <<< 18)) <<< 9)) <<< 18)) <<< 9)) <<< 18)) <<< 9)) <<< 18)",
                "((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9)) <<< 18) + y14 ⊕ ((y10 + y6) <<< 7)) <<< 7)) <<< 7)) <<< 7)",
                "13) + y13 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9)) <<< 18)) <<< 9)) <<< 18)) <<< 9)) <<< 18)) <<< 9)",
                ") + y2 ⊕ ((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9)) <<< 18)) <<< 9)) <<< 18)) <<< 9)) <<< 18)) <<< 9)",
                "((y0 + y12) <<< 7) + y0) <<< 9)) <<< 18) + y3 ⊕ ((y15 + y11) <<< 7)) <<< 7)) <<< 7)) <<< 7)) <<< 13)",
                "((y14 ⊕ ((y10 + y6) <<< 7) + y10) <<< 9)) <<< 18)) <<< 9)) <<< 18)) <<< 9)) <<< 18)) <<< 9)) <<< 18)",
                "⊕ ((y4 ⊕ ((y0 + y12) <<< 7) + y0) <<< 9)) <<< 18) + y3 ⊕ ((y15 + y11) <<< 7)) <<< 7)) <<< 7)) <<< 7)",
                "3 ⊕ ((y9 ⊕ ((y5 + y1) <<< 7) + y5) <<< 9)) <<< 18) + y4 ⊕ ((y0 + y12) <<< 7)) <<< 7)) <<< 7)) <<< 7)",
                ") + y7 ⊕ ((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9)) <<< 18)) <<< 9)) <<< 18)) <<< 9)) <<< 18)) <<< 9)",
                "⊕ ((y5 + y1) <<< 7) + y5) <<< 9)) <<< 18) + y4 ⊕ ((y0 + y12) <<< 7)) <<< 7)) <<< 7)) <<< 7)) <<< 13)",
                "((y3 ⊕ ((y15 + y11) <<< 7) + y15) <<< 9)) <<< 18)) <<< 9)) <<< 18)) <<< 9)) <<< 18)) <<< 9)) <<< 18)"]

        let actualDisplayOutput = doubleroundRDisplay ["y0", "y1", "y2", "y3", "y4", "y5", "y6", "y7", "y8", "y9", "y10", "y11", "y12", "y13", "y14", "y15"] 2
        let actualEquationsOutput = doubleroundREquations ["y0", "y1", "y2", "y3", "y4", "y5", "y6", "y7", "y8", "y9", "y10", "y11", "y12", "y13", "y14", "y15"] 2

        isEqualFirstNList expectedDisplayOutputStart actualDisplayOutput @?= True
        isEqualLastNList expectedDisplayOutputEnd actualDisplayOutput @?= True

        isEqualFirstNList expectedEquationsOutputStart actualEquationsOutput @?= True
        isEqualLastNList expectedEquationsOutputEnd actualEquationsOutput @?= True
    ]

main :: IO Counts
main = do
    -- Run tests

    putStrLn "Running quarterround display tests:"
    _ <- runTestTT quarterroundDisplayTests

    putStrLn "Running rowround display tests:"
    _ <- runTestTT rowroundDisplayTests

    putStrLn "Running columnround display tests:"
    _ <- runTestTT columnroundDisplayTests

    putStrLn "Running doubleround display tests:"
    _ <- runTestTT doubleroundDisplayTests

    putStrLn "Running doubleround with rounds variable display tests:"
    _ <- runTestTT doubleroundRDisplayTests

    -- just return an empty `Count` so we don't have to return the one from a specific test:
    return (Counts 0 0 0 0)

-- Some utility functions

-- Function to check if the first N characters of two strings are equal
isEqualFirstN :: String -> String -> Bool
isEqualFirstN s1 s2 = take (length s1) s1 == take (length s1) s2

-- Function to check if the first N characters of each element in the list are equal
isEqualFirstNList :: [String] -> [String] -> Bool
isEqualFirstNList xs ys = and $ zipWith isEqualFirstN xs ys

-- Function to check if the last N characters of two strings are equal
isEqualLastN :: String -> String -> Bool
isEqualLastN s1 s2 = drop (length s1 - n) s1 == drop (length s2 - n) s2
  where n = min (length s1) (length s2)

-- Function to check if the last N characters of each element in the list are equal
isEqualLastNList :: [String] -> [String] -> Bool
isEqualLastNList xs ys = and $ zipWith isEqualLastN xs ys
